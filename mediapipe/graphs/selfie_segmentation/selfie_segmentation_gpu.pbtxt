input_stream: "input_video"
input_stream: "background_video"

output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

node {
calculator: "ImageFrameToGpuBufferCalculator"
input_stream: "background_video"
output_stream: "gpubuffer_video"
}

node {
calculator: "PacketClonerCalculator"
input_stream: "TICK:throttled_input_video"
input_stream: "gpubuffer_video"
output_stream: "throttled_background_video"
input_stream_handler {
input_stream_handler: "ImmediateInputStreamHandler"
}
}

node {
calculator: "ImageTransformationCalculator"
input_stream: "IMAGE_GPU:throttled_background_video"
output_stream: "IMAGE_GPU:scaled_background_video"
node_options: {
[type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
output_width: 720
output_height: 1280
}
}
}

# Subgraph that performs selfie segmentation.
node {
  calculator: "SelfieSegmentationGpu"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "SEGMENTATION_MASK:segmentation_mask"
}

node {
  calculator: "MaskOverlayCalculator"
  input_stream: "VIDEO:0:scaled_background_video"
  input_stream: "VIDEO:1:throttled_input_video"
  input_stream: "MASK:segmentation_mask"
  output_stream: "OUTPUT:output_video"
}